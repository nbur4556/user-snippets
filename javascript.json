{
	// JavaScript
	"Array Map Prototype": {
		"prefix": "_mapArray",
		"body": [
			"${1:arrayName}.map(($2) => {",
			"    $0",
			"});"
		],
		"description": "Map prototype on an array."
	},
	"Ternary Operator": {
		"prefix": "_ternary",
		"body": [
			"(${1:condition}) ? ${2:truthyResult} : ${3:falseyResult};"
		],
		"description": "Ternary operator with truthy and falsy results."
	},
	// React
	"React Class Component": {
		"prefix": "_reactClassComponent",
		"body": [
			"import React from 'react';",
			"",
			"class ${1:Name} extends React.Component {",
			"    render() {",
			"        return (",
			"            ${2:<div>$0</div>}",
			"        );",
			"    }",
			"}",
			"",
			"export default ${1:Name};"
		],
		"description": "React class component."
	},
	"React Class Component with State": {
		"prefix": "_reactClassComponentState",
		"body": [
			"import React from 'react';",
			"",
			"class ${1:Name} extends React.Component {",
			"    constructor(props) {",
			"        super(props);",
			"        this.state = { $2 };",
			"    }",
			"",
			"    render() {",
			"        return (",
			"            ${3:<div>$0</div>}",
			"        );",
			"    }",
			"}",
			"",
			"export default ${1:Name};"
		],
		"description": "React class component with state."
	},
	"React Class Component with Did Mount": {
		"prefix": "_reactClassComponentDidMount",
		"body": [
			"import React from 'react';",
			"",
			"class ${1:Name} extends React.Component {",
			"    componentDidMount() {",
			"        $2",
			"    }",
			"",
			"    render() {",
			"        return (",
			"            ${3:<div>$0</div>}",
			"        );",
			"    }",
			"}",
			"",
			"export default ${1:Name};"
		],
		"description": "React class component with component did mount lifecycle method."
	},
	"React Constructor Method with State": {
		"prefix": "_reactConstructor",
		"body": [
			"constructor(props) {",
			"    super(props);",
			"    this.state = { $0 };",
			"}"
		],
		"description": "Constructor method for class components."
	},
	"React Component Did Mount Method": {
		"prefix": "_reactComponentDidMount",
		"body": [
			"componentDidMount() {",
			"    $0",
			"}"
		],
		"description": "Component did mount method for class components."
	},
	"React Component Will Unmount Method": {
		"prefix": "_reactComponentWillUnmount",
		"body": [
			"componentWillUnmount() {",
			"    $0",
			"}"
		],
		"description": "Component will unmount method for class components."
	},
	"React Render Method": {
		"prefix": "_reactRender",
		"body": [
			"render() {",
			"    return (",
			"        ${1:<div>$0</div>}",
			"    );",
			"}"
		],
		"description": "Render method for class components."
	},
	"React Function Component": {
		"prefix": "_reactFuncComponent",
		"body": [
			"import React from 'react';",
			"",
			"const ${1:Name} = () => {",
			"    return (",
			"        ${2:<div>$0</div>}",
			"    );",
			"}",
			"",
			"export default ${1:Name};"
		],
		"description": "React function component."
	},
	"React Function Component with State": {
		"prefix": "_reactFuncComponentState",
		"body": [
			"import React, { useState } from 'react';",
			"",
			"const ${1:Name} = () => {",
			"    const [${2:state}, ${3:setState}] = useState($4);",
			"",
			"    return (",
			"        ${5:<div>$0</div>}",
			"    );",
			"}",
			"",
			"export default ${1:Name};"
		],
		"description": "React component function using state hook."
	},
	"React Function Component with Hook Prototypes": {
		"prefix": "_reactFuncComponentProto",
		"body": [
			"import React, { ${1:Prototypes} } from 'react';",
			"",
			"const ${2:Name} = () => {",
			"    return (",
			"        ${3:<div>$0</div>}",
			"    );",
			"}",
			"",
			"export default ${2:Name};"
		],
		"description": "React component function using prototypes."
	},
	"React Use Effect": {
		"prefix": "_reactUseEffect",
		"body": [
			"useEffect(() => {",
			"    $0",
			"}, [$1])"
		],
		"description": "Use effect method for functional components."
	},
	"React Ternary Operator": {
		"prefix": "_reactTernary",
		"body": [
			"{(${1:condition}) ? ${2:truthyResult} : ${3:falseyResult}}"
		],
		"description": "Ternary operator with truthy and falsey results, in React JSX."
	}
}